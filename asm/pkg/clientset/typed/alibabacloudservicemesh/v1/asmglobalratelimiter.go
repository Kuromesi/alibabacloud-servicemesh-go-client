// Copyright 2025 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	scheme "istio.io/client-go/asm/pkg/clientset/scheme"
	"context"
	"time"

	v1 "istio.io/api/alibabacloudservicemesh/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ASMGlobalRateLimitersGetter has a method to return a ASMGlobalRateLimiterInterface.
// A group's client should implement this interface.
type ASMGlobalRateLimitersGetter interface {
	ASMGlobalRateLimiters(namespace string) ASMGlobalRateLimiterInterface
}

// ASMGlobalRateLimiterInterface has methods to work with ASMGlobalRateLimiter resources.
type ASMGlobalRateLimiterInterface interface {
	Create(ctx context.Context, aSMGlobalRateLimiter *v1.ASMGlobalRateLimiter, opts metav1.CreateOptions) (*v1.ASMGlobalRateLimiter, error)
	Update(ctx context.Context, aSMGlobalRateLimiter *v1.ASMGlobalRateLimiter, opts metav1.UpdateOptions) (*v1.ASMGlobalRateLimiter, error)
	UpdateStatus(ctx context.Context, aSMGlobalRateLimiter *v1.ASMGlobalRateLimiter, opts metav1.UpdateOptions) (*v1.ASMGlobalRateLimiter, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ASMGlobalRateLimiter, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ASMGlobalRateLimiterList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ASMGlobalRateLimiter, err error)
	ASMGlobalRateLimiterExpansion
}

// aSMGlobalRateLimiters implements ASMGlobalRateLimiterInterface
type aSMGlobalRateLimiters struct {
	client rest.Interface
	ns     string
}

// newASMGlobalRateLimiters returns a ASMGlobalRateLimiters
func newASMGlobalRateLimiters(c *IstioV1Client, namespace string) *aSMGlobalRateLimiters {
	return &aSMGlobalRateLimiters{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the aSMGlobalRateLimiter, and returns the corresponding aSMGlobalRateLimiter object, and an error if there is any.
func (c *aSMGlobalRateLimiters) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.ASMGlobalRateLimiter, err error) {
	result = &v1.ASMGlobalRateLimiter{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ASMGlobalRateLimiters that match those selectors.
func (c *aSMGlobalRateLimiters) List(ctx context.Context, opts metav1.ListOptions) (result *v1.ASMGlobalRateLimiterList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ASMGlobalRateLimiterList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested aSMGlobalRateLimiters.
func (c *aSMGlobalRateLimiters) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a aSMGlobalRateLimiter and creates it.  Returns the server's representation of the aSMGlobalRateLimiter, and an error, if there is any.
func (c *aSMGlobalRateLimiters) Create(ctx context.Context, aSMGlobalRateLimiter *v1.ASMGlobalRateLimiter, opts metav1.CreateOptions) (result *v1.ASMGlobalRateLimiter, err error) {
	result = &v1.ASMGlobalRateLimiter{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(aSMGlobalRateLimiter).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a aSMGlobalRateLimiter and updates it. Returns the server's representation of the aSMGlobalRateLimiter, and an error, if there is any.
func (c *aSMGlobalRateLimiters) Update(ctx context.Context, aSMGlobalRateLimiter *v1.ASMGlobalRateLimiter, opts metav1.UpdateOptions) (result *v1.ASMGlobalRateLimiter, err error) {
	result = &v1.ASMGlobalRateLimiter{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		Name(aSMGlobalRateLimiter.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(aSMGlobalRateLimiter).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *aSMGlobalRateLimiters) UpdateStatus(ctx context.Context, aSMGlobalRateLimiter *v1.ASMGlobalRateLimiter, opts metav1.UpdateOptions) (result *v1.ASMGlobalRateLimiter, err error) {
	result = &v1.ASMGlobalRateLimiter{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		Name(aSMGlobalRateLimiter.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(aSMGlobalRateLimiter).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the aSMGlobalRateLimiter and deletes it. Returns an error if one occurs.
func (c *aSMGlobalRateLimiters) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *aSMGlobalRateLimiters) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched aSMGlobalRateLimiter.
func (c *aSMGlobalRateLimiters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ASMGlobalRateLimiter, err error) {
	result = &v1.ASMGlobalRateLimiter{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("asmglobalratelimiters").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
