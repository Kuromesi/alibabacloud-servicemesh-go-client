// Copyright 2025 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1 "istio.io/api/alibabacloudservicemesh/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=istio.alibabacloud.com, Version=v1
	case v1.SchemeGroupVersion.WithResource("asmadaptiveconcurrencies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMAdaptiveConcurrencies().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmcircuitbreakers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMCircuitBreakers().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmcompressors"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMCompressors().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmcredentials"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMCredentials().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmcustomproxyconfiginjectiontemplates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMCustomProxyConfigInjectionTemplates().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmdecompressors"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMDecompressors().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmegresstrafficpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMEgressTrafficPolicies().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmextensionproviders"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMExtensionProviders().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmglobalratelimiters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMGlobalRateLimiters().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmgrpcjsontranscoders"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMGrpcJsonTranscoders().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmkserveconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMKServeConfigs().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmknativeconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMKnativeConfigs().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmlocalratelimiters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMLocalRateLimiters().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmmigratefromistios"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMMigrateFromIstios().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmpacketinspectors"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMPacketInspectors().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmproxyconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMProxyConfigs().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmsecuritypolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMSecurityPolicies().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmswimlanes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMSwimLanes().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("asmswimlanegroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().ASMSwimLaneGroups().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("envoyfiltertemplates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().EnvoyFilterTemplates().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("envoyfiltertemplatebindings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().EnvoyFilterTemplateBindings().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("istiogateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().IstioGateways().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("llmproviders"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().LLMProviders().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("llmroutes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Istio().V1().LLMRoutes().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
