// Copyright 2025 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "istio.io/api/alibabacloudservicemesh/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ASMLocalRateLimiterLister helps list ASMLocalRateLimiters.
// All objects returned here must be treated as read-only.
type ASMLocalRateLimiterLister interface {
	// List lists all ASMLocalRateLimiters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ASMLocalRateLimiter, err error)
	// ASMLocalRateLimiters returns an object that can list and get ASMLocalRateLimiters.
	ASMLocalRateLimiters(namespace string) ASMLocalRateLimiterNamespaceLister
	ASMLocalRateLimiterListerExpansion
}

// aSMLocalRateLimiterLister implements the ASMLocalRateLimiterLister interface.
type aSMLocalRateLimiterLister struct {
	indexer cache.Indexer
}

// NewASMLocalRateLimiterLister returns a new ASMLocalRateLimiterLister.
func NewASMLocalRateLimiterLister(indexer cache.Indexer) ASMLocalRateLimiterLister {
	return &aSMLocalRateLimiterLister{indexer: indexer}
}

// List lists all ASMLocalRateLimiters in the indexer.
func (s *aSMLocalRateLimiterLister) List(selector labels.Selector) (ret []*v1.ASMLocalRateLimiter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ASMLocalRateLimiter))
	})
	return ret, err
}

// ASMLocalRateLimiters returns an object that can list and get ASMLocalRateLimiters.
func (s *aSMLocalRateLimiterLister) ASMLocalRateLimiters(namespace string) ASMLocalRateLimiterNamespaceLister {
	return aSMLocalRateLimiterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ASMLocalRateLimiterNamespaceLister helps list and get ASMLocalRateLimiters.
// All objects returned here must be treated as read-only.
type ASMLocalRateLimiterNamespaceLister interface {
	// List lists all ASMLocalRateLimiters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ASMLocalRateLimiter, err error)
	// Get retrieves the ASMLocalRateLimiter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ASMLocalRateLimiter, error)
	ASMLocalRateLimiterNamespaceListerExpansion
}

// aSMLocalRateLimiterNamespaceLister implements the ASMLocalRateLimiterNamespaceLister
// interface.
type aSMLocalRateLimiterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ASMLocalRateLimiters in the indexer for a given namespace.
func (s aSMLocalRateLimiterNamespaceLister) List(selector labels.Selector) (ret []*v1.ASMLocalRateLimiter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ASMLocalRateLimiter))
	})
	return ret, err
}

// Get retrieves the ASMLocalRateLimiter from the indexer for a given namespace and name.
func (s aSMLocalRateLimiterNamespaceLister) Get(name string) (*v1.ASMLocalRateLimiter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("asmlocalratelimiter"), name)
	}
	return obj.(*v1.ASMLocalRateLimiter), nil
}
