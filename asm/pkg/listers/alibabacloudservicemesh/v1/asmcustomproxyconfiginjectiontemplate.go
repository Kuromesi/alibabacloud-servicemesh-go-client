// Copyright 2025 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "istio.io/api/alibabacloudservicemesh/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ASMCustomProxyConfigInjectionTemplateLister helps list ASMCustomProxyConfigInjectionTemplates.
// All objects returned here must be treated as read-only.
type ASMCustomProxyConfigInjectionTemplateLister interface {
	// List lists all ASMCustomProxyConfigInjectionTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ASMCustomProxyConfigInjectionTemplate, err error)
	// ASMCustomProxyConfigInjectionTemplates returns an object that can list and get ASMCustomProxyConfigInjectionTemplates.
	ASMCustomProxyConfigInjectionTemplates(namespace string) ASMCustomProxyConfigInjectionTemplateNamespaceLister
	ASMCustomProxyConfigInjectionTemplateListerExpansion
}

// aSMCustomProxyConfigInjectionTemplateLister implements the ASMCustomProxyConfigInjectionTemplateLister interface.
type aSMCustomProxyConfigInjectionTemplateLister struct {
	indexer cache.Indexer
}

// NewASMCustomProxyConfigInjectionTemplateLister returns a new ASMCustomProxyConfigInjectionTemplateLister.
func NewASMCustomProxyConfigInjectionTemplateLister(indexer cache.Indexer) ASMCustomProxyConfigInjectionTemplateLister {
	return &aSMCustomProxyConfigInjectionTemplateLister{indexer: indexer}
}

// List lists all ASMCustomProxyConfigInjectionTemplates in the indexer.
func (s *aSMCustomProxyConfigInjectionTemplateLister) List(selector labels.Selector) (ret []*v1.ASMCustomProxyConfigInjectionTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ASMCustomProxyConfigInjectionTemplate))
	})
	return ret, err
}

// ASMCustomProxyConfigInjectionTemplates returns an object that can list and get ASMCustomProxyConfigInjectionTemplates.
func (s *aSMCustomProxyConfigInjectionTemplateLister) ASMCustomProxyConfigInjectionTemplates(namespace string) ASMCustomProxyConfigInjectionTemplateNamespaceLister {
	return aSMCustomProxyConfigInjectionTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ASMCustomProxyConfigInjectionTemplateNamespaceLister helps list and get ASMCustomProxyConfigInjectionTemplates.
// All objects returned here must be treated as read-only.
type ASMCustomProxyConfigInjectionTemplateNamespaceLister interface {
	// List lists all ASMCustomProxyConfigInjectionTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ASMCustomProxyConfigInjectionTemplate, err error)
	// Get retrieves the ASMCustomProxyConfigInjectionTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ASMCustomProxyConfigInjectionTemplate, error)
	ASMCustomProxyConfigInjectionTemplateNamespaceListerExpansion
}

// aSMCustomProxyConfigInjectionTemplateNamespaceLister implements the ASMCustomProxyConfigInjectionTemplateNamespaceLister
// interface.
type aSMCustomProxyConfigInjectionTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ASMCustomProxyConfigInjectionTemplates in the indexer for a given namespace.
func (s aSMCustomProxyConfigInjectionTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1.ASMCustomProxyConfigInjectionTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ASMCustomProxyConfigInjectionTemplate))
	})
	return ret, err
}

// Get retrieves the ASMCustomProxyConfigInjectionTemplate from the indexer for a given namespace and name.
func (s aSMCustomProxyConfigInjectionTemplateNamespaceLister) Get(name string) (*v1.ASMCustomProxyConfigInjectionTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("asmcustomproxyconfiginjectiontemplate"), name)
	}
	return obj.(*v1.ASMCustomProxyConfigInjectionTemplate), nil
}
