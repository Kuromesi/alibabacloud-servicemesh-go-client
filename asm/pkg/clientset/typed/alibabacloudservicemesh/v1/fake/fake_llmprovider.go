// Copyright 2025 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "istio.io/api/alibabacloudservicemesh/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeLLMProviders implements LLMProviderInterface
type FakeLLMProviders struct {
	Fake *FakeIstioV1
	ns   string
}

var llmprovidersResource = v1.SchemeGroupVersion.WithResource("llmproviders")

var llmprovidersKind = v1.SchemeGroupVersion.WithKind("LLMProvider")

// Get takes name of the lLMProvider, and returns the corresponding lLMProvider object, and an error if there is any.
func (c *FakeLLMProviders) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.LLMProvider, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(llmprovidersResource, c.ns, name), &v1.LLMProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LLMProvider), err
}

// List takes label and field selectors, and returns the list of LLMProviders that match those selectors.
func (c *FakeLLMProviders) List(ctx context.Context, opts metav1.ListOptions) (result *v1.LLMProviderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(llmprovidersResource, llmprovidersKind, c.ns, opts), &v1.LLMProviderList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.LLMProviderList{ListMeta: obj.(*v1.LLMProviderList).ListMeta}
	for _, item := range obj.(*v1.LLMProviderList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested lLMProviders.
func (c *FakeLLMProviders) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(llmprovidersResource, c.ns, opts))

}

// Create takes the representation of a lLMProvider and creates it.  Returns the server's representation of the lLMProvider, and an error, if there is any.
func (c *FakeLLMProviders) Create(ctx context.Context, lLMProvider *v1.LLMProvider, opts metav1.CreateOptions) (result *v1.LLMProvider, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(llmprovidersResource, c.ns, lLMProvider), &v1.LLMProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LLMProvider), err
}

// Update takes the representation of a lLMProvider and updates it. Returns the server's representation of the lLMProvider, and an error, if there is any.
func (c *FakeLLMProviders) Update(ctx context.Context, lLMProvider *v1.LLMProvider, opts metav1.UpdateOptions) (result *v1.LLMProvider, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(llmprovidersResource, c.ns, lLMProvider), &v1.LLMProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LLMProvider), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeLLMProviders) UpdateStatus(ctx context.Context, lLMProvider *v1.LLMProvider, opts metav1.UpdateOptions) (*v1.LLMProvider, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(llmprovidersResource, "status", c.ns, lLMProvider), &v1.LLMProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LLMProvider), err
}

// Delete takes name of the lLMProvider and deletes it. Returns an error if one occurs.
func (c *FakeLLMProviders) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(llmprovidersResource, c.ns, name, opts), &v1.LLMProvider{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeLLMProviders) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(llmprovidersResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.LLMProviderList{})
	return err
}

// Patch applies the patch and returns the patched lLMProvider.
func (c *FakeLLMProviders) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.LLMProvider, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(llmprovidersResource, c.ns, name, pt, data, subresources...), &v1.LLMProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LLMProvider), err
}
