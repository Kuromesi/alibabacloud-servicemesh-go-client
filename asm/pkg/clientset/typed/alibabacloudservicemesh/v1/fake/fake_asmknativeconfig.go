// Copyright 2025 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "istio.io/api/alibabacloudservicemesh/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeASMKnativeConfigs implements ASMKnativeConfigInterface
type FakeASMKnativeConfigs struct {
	Fake *FakeIstioV1
}

var asmknativeconfigsResource = v1.SchemeGroupVersion.WithResource("asmknativeconfigs")

var asmknativeconfigsKind = v1.SchemeGroupVersion.WithKind("ASMKnativeConfig")

// Get takes name of the aSMKnativeConfig, and returns the corresponding aSMKnativeConfig object, and an error if there is any.
func (c *FakeASMKnativeConfigs) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.ASMKnativeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(asmknativeconfigsResource, name), &v1.ASMKnativeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMKnativeConfig), err
}

// List takes label and field selectors, and returns the list of ASMKnativeConfigs that match those selectors.
func (c *FakeASMKnativeConfigs) List(ctx context.Context, opts metav1.ListOptions) (result *v1.ASMKnativeConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(asmknativeconfigsResource, asmknativeconfigsKind, opts), &v1.ASMKnativeConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.ASMKnativeConfigList{ListMeta: obj.(*v1.ASMKnativeConfigList).ListMeta}
	for _, item := range obj.(*v1.ASMKnativeConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested aSMKnativeConfigs.
func (c *FakeASMKnativeConfigs) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(asmknativeconfigsResource, opts))
}

// Create takes the representation of a aSMKnativeConfig and creates it.  Returns the server's representation of the aSMKnativeConfig, and an error, if there is any.
func (c *FakeASMKnativeConfigs) Create(ctx context.Context, aSMKnativeConfig *v1.ASMKnativeConfig, opts metav1.CreateOptions) (result *v1.ASMKnativeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(asmknativeconfigsResource, aSMKnativeConfig), &v1.ASMKnativeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMKnativeConfig), err
}

// Update takes the representation of a aSMKnativeConfig and updates it. Returns the server's representation of the aSMKnativeConfig, and an error, if there is any.
func (c *FakeASMKnativeConfigs) Update(ctx context.Context, aSMKnativeConfig *v1.ASMKnativeConfig, opts metav1.UpdateOptions) (result *v1.ASMKnativeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(asmknativeconfigsResource, aSMKnativeConfig), &v1.ASMKnativeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMKnativeConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeASMKnativeConfigs) UpdateStatus(ctx context.Context, aSMKnativeConfig *v1.ASMKnativeConfig, opts metav1.UpdateOptions) (*v1.ASMKnativeConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(asmknativeconfigsResource, "status", aSMKnativeConfig), &v1.ASMKnativeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMKnativeConfig), err
}

// Delete takes name of the aSMKnativeConfig and deletes it. Returns an error if one occurs.
func (c *FakeASMKnativeConfigs) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(asmknativeconfigsResource, name, opts), &v1.ASMKnativeConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeASMKnativeConfigs) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(asmknativeconfigsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1.ASMKnativeConfigList{})
	return err
}

// Patch applies the patch and returns the patched aSMKnativeConfig.
func (c *FakeASMKnativeConfigs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ASMKnativeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(asmknativeconfigsResource, name, pt, data, subresources...), &v1.ASMKnativeConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.ASMKnativeConfig), err
}
