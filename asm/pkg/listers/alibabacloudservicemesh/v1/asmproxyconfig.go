// Copyright 2025 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "istio.io/api/alibabacloudservicemesh/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ASMProxyConfigLister helps list ASMProxyConfigs.
// All objects returned here must be treated as read-only.
type ASMProxyConfigLister interface {
	// List lists all ASMProxyConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ASMProxyConfig, err error)
	// ASMProxyConfigs returns an object that can list and get ASMProxyConfigs.
	ASMProxyConfigs(namespace string) ASMProxyConfigNamespaceLister
	ASMProxyConfigListerExpansion
}

// aSMProxyConfigLister implements the ASMProxyConfigLister interface.
type aSMProxyConfigLister struct {
	indexer cache.Indexer
}

// NewASMProxyConfigLister returns a new ASMProxyConfigLister.
func NewASMProxyConfigLister(indexer cache.Indexer) ASMProxyConfigLister {
	return &aSMProxyConfigLister{indexer: indexer}
}

// List lists all ASMProxyConfigs in the indexer.
func (s *aSMProxyConfigLister) List(selector labels.Selector) (ret []*v1.ASMProxyConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ASMProxyConfig))
	})
	return ret, err
}

// ASMProxyConfigs returns an object that can list and get ASMProxyConfigs.
func (s *aSMProxyConfigLister) ASMProxyConfigs(namespace string) ASMProxyConfigNamespaceLister {
	return aSMProxyConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ASMProxyConfigNamespaceLister helps list and get ASMProxyConfigs.
// All objects returned here must be treated as read-only.
type ASMProxyConfigNamespaceLister interface {
	// List lists all ASMProxyConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ASMProxyConfig, err error)
	// Get retrieves the ASMProxyConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ASMProxyConfig, error)
	ASMProxyConfigNamespaceListerExpansion
}

// aSMProxyConfigNamespaceLister implements the ASMProxyConfigNamespaceLister
// interface.
type aSMProxyConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ASMProxyConfigs in the indexer for a given namespace.
func (s aSMProxyConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.ASMProxyConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ASMProxyConfig))
	})
	return ret, err
}

// Get retrieves the ASMProxyConfig from the indexer for a given namespace and name.
func (s aSMProxyConfigNamespaceLister) Get(name string) (*v1.ASMProxyConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("asmproxyconfig"), name)
	}
	return obj.(*v1.ASMProxyConfig), nil
}
