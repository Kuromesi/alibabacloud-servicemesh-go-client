// Copyright 2025 Alibaba Cloud Service Mesh
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "istio.io/api/alibabacloudservicemesh/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LLMProviderLister helps list LLMProviders.
// All objects returned here must be treated as read-only.
type LLMProviderLister interface {
	// List lists all LLMProviders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LLMProvider, err error)
	// LLMProviders returns an object that can list and get LLMProviders.
	LLMProviders(namespace string) LLMProviderNamespaceLister
	LLMProviderListerExpansion
}

// lLMProviderLister implements the LLMProviderLister interface.
type lLMProviderLister struct {
	indexer cache.Indexer
}

// NewLLMProviderLister returns a new LLMProviderLister.
func NewLLMProviderLister(indexer cache.Indexer) LLMProviderLister {
	return &lLMProviderLister{indexer: indexer}
}

// List lists all LLMProviders in the indexer.
func (s *lLMProviderLister) List(selector labels.Selector) (ret []*v1.LLMProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LLMProvider))
	})
	return ret, err
}

// LLMProviders returns an object that can list and get LLMProviders.
func (s *lLMProviderLister) LLMProviders(namespace string) LLMProviderNamespaceLister {
	return lLMProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LLMProviderNamespaceLister helps list and get LLMProviders.
// All objects returned here must be treated as read-only.
type LLMProviderNamespaceLister interface {
	// List lists all LLMProviders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LLMProvider, err error)
	// Get retrieves the LLMProvider from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.LLMProvider, error)
	LLMProviderNamespaceListerExpansion
}

// lLMProviderNamespaceLister implements the LLMProviderNamespaceLister
// interface.
type lLMProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LLMProviders in the indexer for a given namespace.
func (s lLMProviderNamespaceLister) List(selector labels.Selector) (ret []*v1.LLMProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LLMProvider))
	})
	return ret, err
}

// Get retrieves the LLMProvider from the indexer for a given namespace and name.
func (s lLMProviderNamespaceLister) Get(name string) (*v1.LLMProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("llmprovider"), name)
	}
	return obj.(*v1.LLMProvider), nil
}
